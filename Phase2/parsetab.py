
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADD_OP AND_KW ASSIGN_OP BEGIN_KW BOOLEAN_KW COLON COMMA COMMENT DIV_OP DO_KW ELSE_KW END_KW EQ_OP FALSE_KW FOR_KW FUNCTION_KW GE_OP GT_OP IDENTIFIER IF_KW INTEGER_KW LEFT_PA LE_OP LT_OP MUL_OP NE_OP NUMBER OR_KW PROGRAM_KW REAL_KW RETURN_KW RIGHT_PA SEMICOLON SUB_OP THEN_KW TO_KW TRUE_KW WHILE_KWprogram : PROGRAM_KW identifier SEMICOLON blockidentifier : IDENTIFIERblock : BEGIN_KW statement_list END_KWstatement_list : statement SEMICOLON statement_list\n                          | emptystatement : assignment_statement\n                     | if_statement\n                     | while_statement\n                     | for_statement\n                     | other_statementsassignment_statement : identifier ASSIGN_OP expressionif_statement : IF_KW condition THEN_KW statement_list else_partelse_part : ELSE_KW statement_list\n                     | emptycondition : expression LT_OP expression\n                     | expression LE_OP expression\n                     | expression EQ_OP expression\n                     | expression NE_OP expression\n                     | expression GE_OP expression\n                     | expression GT_OP expressionexpression : term\n                      | expression ADD_OP term\n                      | expression SUB_OP termterm : factor\n                | term MUL_OP factor\n                | term DIV_OP factorfactor : NUMBER\n                  | identifier\n                  | LEFT_PA expression RIGHT_PAwhile_statement : WHILE_KW condition DO_KW statement_listfor_statement : FOR_KW identifier ASSIGN_OP expression TO_KW expression DO_KW statement_listother_statements : RETURN_KW expression\n                           | function_callfunction_call : FUNCTION_KW identifier LEFT_PA argument_list RIGHT_PAargument_list : expression COMMA argument_list\n                        | expression\n                        | emptyempty :'
    
_lr_action_items = {'PROGRAM_KW':([0,],[2,]),'$end':([1,6,23,],[0,-1,-3,]),'IDENTIFIER':([2,7,17,18,19,20,22,24,25,32,39,40,41,42,43,44,45,46,47,48,49,51,52,53,72,74,76,80,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'SEMICOLON':([3,4,9,10,11,12,13,14,15,21,24,28,29,30,31,35,37,38,39,51,54,61,62,63,64,65,66,71,72,73,75,77,80,81,],[5,-2,24,-5,-6,-7,-8,-9,-10,-33,-38,-21,-24,-27,-28,-32,-4,-11,-38,-38,-38,-22,-23,-25,-26,-29,-30,-12,-38,-14,-34,-13,-38,-31,]),'ASSIGN_OP':([4,16,34,],[-2,25,52,]),'MUL_OP':([4,28,29,30,31,61,62,63,64,65,],[-2,48,-24,-27,-28,48,48,-25,-26,-29,]),'DIV_OP':([4,28,29,30,31,61,62,63,64,65,],[-2,49,-24,-27,-28,49,49,-25,-26,-29,]),'LT_OP':([4,27,28,29,30,31,61,62,63,64,65,],[-2,40,-21,-24,-27,-28,-22,-23,-25,-26,-29,]),'LE_OP':([4,27,28,29,30,31,61,62,63,64,65,],[-2,41,-21,-24,-27,-28,-22,-23,-25,-26,-29,]),'EQ_OP':([4,27,28,29,30,31,61,62,63,64,65,],[-2,42,-21,-24,-27,-28,-22,-23,-25,-26,-29,]),'NE_OP':([4,27,28,29,30,31,61,62,63,64,65,],[-2,43,-21,-24,-27,-28,-22,-23,-25,-26,-29,]),'GE_OP':([4,27,28,29,30,31,61,62,63,64,65,],[-2,44,-21,-24,-27,-28,-22,-23,-25,-26,-29,]),'GT_OP':([4,27,28,29,30,31,61,62,63,64,65,],[-2,45,-21,-24,-27,-28,-22,-23,-25,-26,-29,]),'ADD_OP':([4,27,28,29,30,31,35,38,50,55,56,57,58,59,60,61,62,63,64,65,67,69,78,],[-2,46,-21,-24,-27,-28,46,46,46,46,46,46,46,46,46,-22,-23,-25,-26,-29,46,46,46,]),'SUB_OP':([4,27,28,29,30,31,35,38,50,55,56,57,58,59,60,61,62,63,64,65,67,69,78,],[-2,47,-21,-24,-27,-28,47,47,47,47,47,47,47,47,47,-22,-23,-25,-26,-29,47,47,47,]),'LEFT_PA':([4,17,18,20,25,32,36,40,41,42,43,44,45,46,47,48,49,52,53,74,76,],[-2,32,32,32,32,32,53,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'RIGHT_PA':([4,28,29,30,31,50,53,61,62,63,64,65,68,69,70,76,79,],[-2,-21,-24,-27,-28,65,-38,-22,-23,-25,-26,-29,75,-36,-37,-38,-35,]),'THEN_KW':([4,26,28,29,30,31,55,56,57,58,59,60,61,62,63,64,65,],[-2,39,-21,-24,-27,-28,-15,-16,-17,-18,-19,-20,-22,-23,-25,-26,-29,]),'DO_KW':([4,28,29,30,31,33,55,56,57,58,59,60,61,62,63,64,65,78,],[-2,-21,-24,-27,-28,51,-15,-16,-17,-18,-19,-20,-22,-23,-25,-26,-29,80,]),'TO_KW':([4,28,29,30,31,61,62,63,64,65,67,],[-2,-21,-24,-27,-28,-22,-23,-25,-26,-29,74,]),'COMMA':([4,28,29,30,31,61,62,63,64,65,69,],[-2,-21,-24,-27,-28,-22,-23,-25,-26,-29,76,]),'BEGIN_KW':([5,],[7,]),'END_KW':([7,8,10,24,37,],[-38,23,-5,-38,-4,]),'IF_KW':([7,24,39,51,72,80,],[17,17,17,17,17,17,]),'WHILE_KW':([7,24,39,51,72,80,],[18,18,18,18,18,18,]),'FOR_KW':([7,24,39,51,72,80,],[19,19,19,19,19,19,]),'RETURN_KW':([7,24,39,51,72,80,],[20,20,20,20,20,20,]),'FUNCTION_KW':([7,24,39,51,72,80,],[22,22,22,22,22,22,]),'ELSE_KW':([10,24,37,39,54,],[-5,-38,-4,-38,72,]),'NUMBER':([17,18,20,25,32,40,41,42,43,44,45,46,47,48,49,52,53,74,76,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'identifier':([2,7,17,18,19,20,22,24,25,32,39,40,41,42,43,44,45,46,47,48,49,51,52,53,72,74,76,80,],[3,16,31,31,34,31,36,16,31,31,16,31,31,31,31,31,31,31,31,31,31,16,31,31,16,31,31,16,]),'block':([5,],[6,]),'statement_list':([7,24,39,51,72,80,],[8,37,54,66,77,81,]),'statement':([7,24,39,51,72,80,],[9,9,9,9,9,9,]),'empty':([7,24,39,51,53,54,72,76,80,],[10,10,10,10,70,73,10,70,10,]),'assignment_statement':([7,24,39,51,72,80,],[11,11,11,11,11,11,]),'if_statement':([7,24,39,51,72,80,],[12,12,12,12,12,12,]),'while_statement':([7,24,39,51,72,80,],[13,13,13,13,13,13,]),'for_statement':([7,24,39,51,72,80,],[14,14,14,14,14,14,]),'other_statements':([7,24,39,51,72,80,],[15,15,15,15,15,15,]),'function_call':([7,24,39,51,72,80,],[21,21,21,21,21,21,]),'condition':([17,18,],[26,33,]),'expression':([17,18,20,25,32,40,41,42,43,44,45,52,53,74,76,],[27,27,35,38,50,55,56,57,58,59,60,67,69,78,69,]),'term':([17,18,20,25,32,40,41,42,43,44,45,46,47,52,53,74,76,],[28,28,28,28,28,28,28,28,28,28,28,61,62,28,28,28,28,]),'factor':([17,18,20,25,32,40,41,42,43,44,45,46,47,48,49,52,53,74,76,],[29,29,29,29,29,29,29,29,29,29,29,29,29,63,64,29,29,29,29,]),'argument_list':([53,76,],[68,79,]),'else_part':([54,],[71,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM_KW identifier SEMICOLON block','program',4,'p_program','Syn.py',8),
  ('identifier -> IDENTIFIER','identifier',1,'p_identifier','Syn.py',13),
  ('block -> BEGIN_KW statement_list END_KW','block',3,'p_block','Syn.py',18),
  ('statement_list -> statement SEMICOLON statement_list','statement_list',3,'p_statement_list','Syn.py',23),
  ('statement_list -> empty','statement_list',1,'p_statement_list','Syn.py',24),
  ('statement -> assignment_statement','statement',1,'p_statement','Syn.py',32),
  ('statement -> if_statement','statement',1,'p_statement','Syn.py',33),
  ('statement -> while_statement','statement',1,'p_statement','Syn.py',34),
  ('statement -> for_statement','statement',1,'p_statement','Syn.py',35),
  ('statement -> other_statements','statement',1,'p_statement','Syn.py',36),
  ('assignment_statement -> identifier ASSIGN_OP expression','assignment_statement',3,'p_assignment_statement','Syn.py',41),
  ('if_statement -> IF_KW condition THEN_KW statement_list else_part','if_statement',5,'p_if_statement','Syn.py',46),
  ('else_part -> ELSE_KW statement_list','else_part',2,'p_else_part','Syn.py',51),
  ('else_part -> empty','else_part',1,'p_else_part','Syn.py',52),
  ('condition -> expression LT_OP expression','condition',3,'p_condition','Syn.py',60),
  ('condition -> expression LE_OP expression','condition',3,'p_condition','Syn.py',61),
  ('condition -> expression EQ_OP expression','condition',3,'p_condition','Syn.py',62),
  ('condition -> expression NE_OP expression','condition',3,'p_condition','Syn.py',63),
  ('condition -> expression GE_OP expression','condition',3,'p_condition','Syn.py',64),
  ('condition -> expression GT_OP expression','condition',3,'p_condition','Syn.py',65),
  ('expression -> term','expression',1,'p_expression','Syn.py',70),
  ('expression -> expression ADD_OP term','expression',3,'p_expression','Syn.py',71),
  ('expression -> expression SUB_OP term','expression',3,'p_expression','Syn.py',72),
  ('term -> factor','term',1,'p_term','Syn.py',77),
  ('term -> term MUL_OP factor','term',3,'p_term','Syn.py',78),
  ('term -> term DIV_OP factor','term',3,'p_term','Syn.py',79),
  ('factor -> NUMBER','factor',1,'p_factor','Syn.py',84),
  ('factor -> identifier','factor',1,'p_factor','Syn.py',85),
  ('factor -> LEFT_PA expression RIGHT_PA','factor',3,'p_factor','Syn.py',86),
  ('while_statement -> WHILE_KW condition DO_KW statement_list','while_statement',4,'p_while_statement','Syn.py',91),
  ('for_statement -> FOR_KW identifier ASSIGN_OP expression TO_KW expression DO_KW statement_list','for_statement',8,'p_for_statement','Syn.py',96),
  ('other_statements -> RETURN_KW expression','other_statements',2,'p_other_statements','Syn.py',101),
  ('other_statements -> function_call','other_statements',1,'p_other_statements','Syn.py',102),
  ('function_call -> FUNCTION_KW identifier LEFT_PA argument_list RIGHT_PA','function_call',5,'p_function_call','Syn.py',107),
  ('argument_list -> expression COMMA argument_list','argument_list',3,'p_argument_list','Syn.py',112),
  ('argument_list -> expression','argument_list',1,'p_argument_list','Syn.py',113),
  ('argument_list -> empty','argument_list',1,'p_argument_list','Syn.py',114),
  ('empty -> <empty>','empty',0,'p_empty','Syn.py',124),
]
